{"ast":null,"code":"import { DomSanitizer } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { LEFT_ARROW, RIGHT_ARROW, ESCAPE } from '@angular/cdk/keycodes';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { FocusTrapFactory, A11yModule } from '@angular/cdk/a11y';\nimport { Gallery, GalleryModule } from '@ngx-gallery/core';\nimport { InjectionToken, Component, Optional, ChangeDetectionStrategy, ElementRef, Inject, Injectable, Directive, Input, Renderer2, NgModule } from '@angular/core';\nimport { Subject, fromEvent, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/platform-browser';\nimport * as ɵngcc3 from '@ngx-gallery/core';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nconst LIGHTBOX_CONFIG = new InjectionToken('lightboxConfig');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nconst lightboxAnimation = trigger('lightbox', [// Note: The `enter` animation transitions to `transform: none`, because for some reason\n// specifying the transform explicitly, causes IE both to blur the dialog content and\n// decimate the animation performance. Leaving it as `none` solves both issues.\nstate('void, exit', style({\n  opacity: 0,\n  transform: 'scale(0.7)'\n})), state('enter', style({\n  transform: 'none'\n})), transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({\n  transform: 'none',\n  opacity: 1\n}))), transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({\n  opacity: 0\n})))]);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nlet LightboxComponent = /*#__PURE__*/(() => {\n  class LightboxComponent {\n    /**\n     * @param {?} _document\n     * @param {?} _focusTrapFactory\n     * @param {?} _elementRef\n     * @param {?} sanitizer\n     */\n    constructor(_document, _focusTrapFactory, _elementRef, sanitizer) {\n      this._document = _document;\n      this._focusTrapFactory = _focusTrapFactory;\n      this._elementRef = _elementRef;\n      this.sanitizer = sanitizer;\n      /**\n       * State of the lightbox animation.\n       */\n\n      this.state = 'enter';\n\n      this._savePreviouslyFocusedElement();\n    }\n    /**\n     * Callback, invoked whenever an animation on the host completes.\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    onAnimationDone(event) {\n      if (event.toState === 'enter') {\n        this._trapFocus();\n      } else {\n        this.overlayRef.dispose();\n\n        this._restoreFocus();\n      }\n    }\n    /**\n     * Moves the focus inside the focus trap.\n     * @private\n     * @return {?}\n     */\n\n\n    _trapFocus() {\n      if (!this._focusTrap) {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n      } // If were to attempt to focus immediately, then the content of the lightbox would not yet be\n      // ready in instances where change detection has to run first. To deal with this, we simply\n      // wait for the microtask queue to be empty.\n\n\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n    /**\n     * Saves a reference to the element that was focused before the lightbox was opened.\n     * @private\n     * @return {?}\n     */\n\n\n    _savePreviouslyFocusedElement() {\n      if (this._document) {\n        this._elementFocusedBeforeDialogWasOpened =\n        /** @type {?} */\n        this._document.activeElement; // Note that there is no focus method when rendering on the server.\n\n        if (this._elementRef.nativeElement.focus) {\n          // Move focus onto the lightbox immediately in order to prevent the user from accidentally\n          // opening multiple dialogs at the same time. Needs to be async, because the element\n          // may not be focusable immediately.\n          Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n        }\n      }\n    }\n    /**\n     * Restores focus to the element that was focused before the lightbox opened.\n     * @private\n     * @return {?}\n     */\n\n\n    _restoreFocus() {\n      /** @type {?} */\n      const toFocus = this._elementFocusedBeforeDialogWasOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n      if (toFocus && typeof toFocus.focus === 'function') {\n        toFocus.focus();\n      }\n\n      if (this._focusTrap) {\n        this._focusTrap.destroy();\n      }\n    }\n\n  }\n\n  LightboxComponent.ɵfac = function LightboxComponent_Factory(t) {\n    return new (t || LightboxComponent)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DomSanitizer));\n  };\n\n  LightboxComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: LightboxComponent,\n    selectors: [[\"lightbox\"]],\n    hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\"],\n    hostVars: 6,\n    hostBindings: function LightboxComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@lightbox.done\", function LightboxComponent_animation_lightbox_done_HostBindingHandler($event) {\n          return ctx.onAnimationDone($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", \"lightbox-\" + ctx.id)(\"role\", ctx.role)(\"aria-labelledby\", ctx.ariaLabel ? null : ctx.ariaLabelledBy)(\"aria-label\", ctx.ariaLabel)(\"aria-describedby\", ctx.ariaDescribedBy || null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@lightbox\", ctx.state);\n      }\n    },\n    decls: 2,\n    vars: 4,\n    consts: [[3, \"id\", \"destroyRef\", \"skipInitConfig\"], [\"aria-label\", \"Close\", 1, \"g-btn-close\", 3, \"innerHTML\", \"click\"]],\n    template: function LightboxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"gallery\", 0)(1, \"i\", 1);\n        ɵngcc0.ɵɵlistener(\"click\", function LightboxComponent_Template_i_click_1_listener() {\n          return ctx.overlayRef.detach();\n        });\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"id\", ctx.id)(\"destroyRef\", false)(\"skipInitConfig\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"innerHTML\", ctx.sanitizer.bypassSecurityTrustHtml(ctx.closeIcon), ɵngcc0.ɵɵsanitizeHtml);\n      }\n    },\n    dependencies: [ɵngcc3.GalleryComponent],\n    styles: [\"lightbox{position:relative;display:block;width:1100px;height:800px;max-width:94vw;max-height:90vh;border-radius:4px;overflow:hidden;box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12)}  lightbox:focus{outline:0}  lightbox gallery{overflow:hidden;margin:0;display:block;width:100%;height:100%}  .g-backdrop{background-color:rgba(0,0,0,.32)}  .fullscreen{width:100%}  .fullscreen   lightbox{max-width:unset;max-height:unset;position:fixed;top:0;left:0;bottom:0;right:0;height:100%;width:100%;border-radius:0}  .g-overlay{margin:auto}@media only screen and (max-width:480px){  .g-overlay{width:100%}  .g-overlay   lightbox{max-width:unset;max-height:unset;position:fixed;top:0;left:0;bottom:0;right:0;height:100%;width:100%;border-radius:0}}  .g-btn-close{position:absolute;right:.9em;top:.9em;z-index:60;cursor:pointer;width:20px;height:20px}@media only screen and (max-width:480px){  .g-btn-close{right:.7em;top:.7em}}\"],\n    data: {\n      animation: [lightboxAnimation]\n    },\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return LightboxComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst defaultConfig = {\n  backdropClass: 'g-backdrop',\n  panelClass: 'g-overlay',\n  hasBackdrop: true,\n  keyboardShortcuts: true,\n  role: 'lightbox',\n  closeIcon: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"512px\" height=\"512px\" enable-background=\"new 0 0 47.971 47.971\" version=\"1.1\" viewBox=\"0 0 47.971 47.971\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\">\n\t<path d=\"M28.228,23.986L47.092,5.122c1.172-1.171,1.172-3.071,0-4.242c-1.172-1.172-3.07-1.172-4.242,0L23.986,19.744L5.121,0.88   c-1.172-1.172-3.07-1.172-4.242,0c-1.172,1.171-1.172,3.071,0,4.242l18.865,18.864L0.879,42.85c-1.172,1.171-1.172,3.071,0,4.242   C1.465,47.677,2.233,47.97,3,47.97s1.535-0.293,2.121-0.879l18.865-18.864L42.85,47.091c0.586,0.586,1.354,0.879,2.121,0.879   s1.535-0.293,2.121-0.879c1.172-1.171,1.172-3.071,0-4.242L28.228,23.986z\" fill=\"#fff\"/>\n</svg>\n`\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nlet Lightbox = /*#__PURE__*/(() => {\n  class Lightbox {\n    /**\n     * @param {?} config\n     * @param {?} _gallery\n     * @param {?} _overlay\n     */\n    constructor(config, _gallery, _overlay) {\n      this._gallery = _gallery;\n      this._overlay = _overlay;\n      /**\n       * Stream that emits when lightbox is opened\n       */\n\n      this.opened = new Subject();\n      /**\n       * Stream that emits when lightbox is closed\n       */\n\n      this.closed = new Subject();\n      this._config = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\n    }\n    /**\n     * Set Lightbox Config\n     * @param {?} config - LightboxConfig\n     * @return {?}\n     */\n\n\n    setConfig(config) {\n      this._config = Object.assign({}, this._config, config);\n    }\n    /**\n     * Open Lightbox Overlay\n     * @param {?=} i - Current Index\n     * @param {?=} id - Gallery ID\n     * @param {?=} config - Lightbox Config\n     * @return {?}\n     */\n\n\n    open(i = 0, id = 'lightbox', config) {\n      /** @type {?} */\n      const _config = config ? Object.assign({}, this._config, config) : this._config;\n      /** @type {?} */\n\n\n      const overlayConfig = {\n        backdropClass: _config.backdropClass,\n        panelClass: _config.panelClass,\n        hasBackdrop: _config.hasBackdrop,\n        positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n        scrollStrategy: this._overlay.scrollStrategies.block(),\n        disposeOnNavigation: true\n      };\n      /** @type {?} */\n\n      const galleryRef = this._gallery.ref(id);\n\n      galleryRef.set(i);\n      this._overlayRef = this._overlay.create(overlayConfig); // overlay opened event\n\n      this._overlayRef.attachments().subscribe(() => this.opened.next(id)); // overlay closed event\n\n\n      this._overlayRef.detachments().subscribe(() => this.closed.next(id)); // Attach gallery to the overlay\n\n      /** @type {?} */\n\n\n      const galleryPortal = new ComponentPortal(LightboxComponent);\n      /** @type {?} */\n\n      const lightboxRef = this._overlayRef.attach(galleryPortal);\n\n      lightboxRef.instance.id = id;\n      lightboxRef.instance.overlayRef = this._overlayRef;\n      lightboxRef.instance.closeIcon = this._config.closeIcon;\n      lightboxRef.instance.role = this._config.role;\n      lightboxRef.instance.ariaLabel = this._config.ariaLabel;\n      lightboxRef.instance.ariaLabelledBy = this._config.ariaLabelledBy;\n      lightboxRef.instance.ariaDescribedBy = this._config.ariaDescribedBy;\n\n      if (_config.hasBackdrop) {\n        this._overlayRef.backdropClick().subscribe(() => this.close());\n      } // Add keyboard shortcuts\n\n\n      if (_config.keyboardShortcuts) {\n        this._overlayRef.keydownEvents().subscribe(event => {\n          switch (event.keyCode) {\n            case LEFT_ARROW:\n              galleryRef.prev();\n              break;\n\n            case RIGHT_ARROW:\n              galleryRef.next();\n              break;\n\n            case ESCAPE:\n              this.close();\n          }\n        });\n      }\n    }\n    /**\n     * Close Lightbox Overlay\n     * @return {?}\n     */\n\n\n    close() {\n      if (this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n      }\n    }\n\n  }\n\n  Lightbox.ɵfac = function Lightbox_Factory(t) {\n    return new (t || Lightbox)(ɵngcc0.ɵɵinject(LIGHTBOX_CONFIG, 8), ɵngcc0.ɵɵinject(ɵngcc3.Gallery), ɵngcc0.ɵɵinject(ɵngcc4.Overlay));\n  };\n\n  Lightbox.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Lightbox,\n    factory: Lightbox.ɵfac\n  });\n  /** @nocollapse */\n\n  return Lightbox;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet LightboxDirective = /*#__PURE__*/(() => {\n  class LightboxDirective {\n    /**\n     * @param {?} _lightbox\n     * @param {?} _el\n     * @param {?} _renderer\n     */\n    constructor(_lightbox, _el, _renderer) {\n      this._lightbox = _lightbox;\n      this._el = _el;\n      this._renderer = _renderer;\n      this.clickEvent = Subscription.EMPTY;\n      this.index = 0;\n      this.id = 'root';\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this._renderer.setStyle(this._el.nativeElement, 'cursor', 'pointer');\n\n      this.clickEvent = fromEvent(this._el.nativeElement, 'click').pipe(tap(() => this._lightbox.open(this.index, this.id))).subscribe();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this.clickEvent.unsubscribe();\n    }\n\n  }\n\n  LightboxDirective.ɵfac = function LightboxDirective_Factory(t) {\n    return new (t || LightboxDirective)(ɵngcc0.ɵɵdirectiveInject(Lightbox), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  LightboxDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: LightboxDirective,\n    selectors: [[\"\", \"lightbox\", \"\"]],\n    inputs: {\n      index: [\"lightbox\", \"index\"],\n      id: [\"gallery\", \"id\"]\n    }\n  });\n  /** @nocollapse */\n\n  return LightboxDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet LightboxModule = /*#__PURE__*/(() => {\n  class LightboxModule {\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    static withConfig(config) {\n      return {\n        ngModule: LightboxModule,\n        providers: [{\n          provide: LIGHTBOX_CONFIG,\n          useValue: config\n        }]\n      };\n    }\n\n  }\n\n  LightboxModule.ɵfac = function LightboxModule_Factory(t) {\n    return new (t || LightboxModule)();\n  };\n\n  LightboxModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: LightboxModule\n  });\n  LightboxModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [Lightbox],\n    imports: [OverlayModule, GalleryModule, A11yModule]\n  });\n  return LightboxModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LightboxModule, {\n    declarations: function () {\n      return [LightboxComponent, LightboxDirective];\n    },\n    imports: function () {\n      return [OverlayModule, GalleryModule, A11yModule];\n    },\n    exports: function () {\n      return [LightboxDirective];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { LIGHTBOX_CONFIG, LightboxComponent, Lightbox, LightboxModule, lightboxAnimation as ɵa, LightboxDirective as ɵb }; //# sourceMappingURL=ngx-gallery-lightbox.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}